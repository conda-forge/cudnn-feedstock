{% set version = "8.4.1.50" %}

# cuDNN v8.3.x supports CUDA versions 10.2 - 11.5
# For CUDA 11.x there is one cuDNN distribution that works with all CUDA 11 versions
# (We don't support CUDA 10.2 anymore as it's x86-64 only.)
{% if cuda_compiler_version[:2] == "11" %}
{% set cudnn_cuda_version = "11.6" %}
{% endif %}

package:
  name: cudnn
  version: {{ version }}

source:
  - url: https://developer.download.nvidia.com/compute/redist/cudnn/v{{ ".".join(version.split(".")[:3]) }}/local_installers/{{ cudnn_cuda_version }}/cudnn-linux-x86_64-{{ version }}_cuda{{ cudnn_cuda_version }}-archive.tar.xz  # [linux64]
    sha256: 5500953c08c5e5d1dddcfda234f9efbddcdbe43a53b26dc0a82c723fa170c457  # [linux64 and cuda_compiler_version == "11.2"]
  - url: https://developer.download.nvidia.com/compute/redist/cudnn/v{{ ".".join(version.split(".")[:3]) }}/local_installers/{{ cudnn_cuda_version }}/cudnn-linux-ppc64le-{{ version }}_cuda{{ cudnn_cuda_version }}-archive.tar.xz  # [ppc64le]
    sha256: 0581bce48023a3ee71c3a819aaefcabe693eca18b61e2521dc5f8e6e71567b1b  # [ppc64le and cuda_compiler_version == "11.2"]
  - url: https://developer.download.nvidia.com/compute/redist/cudnn/v{{ ".".join(version.split(".")[:3]) }}/local_installers/{{ cudnn_cuda_version }}/cudnn-linux-sbsa-{{ version }}_cuda{{ cudnn_cuda_version }}-archive.tar.xz  # [aarch64]
    sha256: 7eb8c96bfeec98e8aa7cea1e95633d2a9481fc99040eb0311d31bf137a7aa6ea  # [aarch64 and cuda_compiler_version == "11.2"]
  - url: https://developer.download.nvidia.com/compute/redist/cudnn/v{{ ".".join(version.split(".")[:3]) }}/local_installers/{{ cudnn_cuda_version }}/cudnn-windows-x86_64-{{ version }}_cuda{{ cudnn_cuda_version }}-archive.zip  # [win64]
    sha256: 9e36eef803f1cf9ab24846dc133a3014fdc548775ee29073e8466d415957a1c0  # [win64 and cuda_compiler_version == "11.2"]

build:
  number: 0
  skip: True   # [cuda_compiler_version != "11.2"]
  script:
    - mkdir -p $PREFIX/include               # [linux]
    - cp include/cudnn*.h $PREFIX/include/   # [linux]
    - mkdir -p $PREFIX/lib                   # [linux]
    - mv lib/libcudnn*.so* $PREFIX/lib/      # [linux]

    - mkdir %LIBRARY_INC%                                # [win]
    - copy %SRC_DIR%\\include\\cudnn*.h %LIBRARY_INC%\\  # [win]
    - mkdir %LIBRARY_LIB%                                # [win]
    - copy %SRC_DIR%\\lib\\cudnn*.lib %LIBRARY_LIB%\\    # [win]
    - copy %SRC_DIR%\\dll_x64\\*.lib %LIBRARY_LIB%\\     # [win]
    - mkdir %LIBRARY_BIN%                                # [win]
    - copy %SRC_DIR%\\bin\\cudnn*.dll %LIBRARY_BIN%\\    # [win]
    - copy %SRC_DIR%\\dll_x64\\*.dll %LIBRARY_BIN%\\     # [win]
  run_exports:
    - {{ pin_subpackage('cudnn') }}

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}
    - sysroot_linux-64 2.17  # [linux64]
  host:
    - patchelf >=0.12  # [linux]
    # to suppress ".so not found" errors
    - libzlib  # [linux]
    - libzlib-wapi  # [win64]
  run:
    - cudatoolkit 11.*
  run_constrained:
    # Only GLIBC_2.17 or older symbols present
    - __glibc >=2.17  # [linux]

test:
  requires:
    - {{ compiler('c') }}  # [linux]
  files:
    - test_load_elf.c      # [linux]
  commands:
    - if not exist %LIBRARY_INC%/cudnn.h exit 1        # [win]
    - if not exist %LIBRARY_INC%/cudnn_adv_train.h exit 1  # [win]
    - if not exist %LIBRARY_LIB%/cudnn.lib exit 1      # [win]
    - if not exist %LIBRARY_LIB%/cudnn_adv_train.lib exit 1      # [win]
    - if not exist %LIBRARY_LIB%/zlibwapi.lib exit 1   # [win]
    - if not exist %LIBRARY_BIN%/cudnn64_8.dll exit 1  # [win]
    - if not exist %LIBRARY_BIN%/cudnn_adv_train64_8.dll exit 1  # [win]
    - if not exist %LIBRARY_BIN%/zlibwapi.dll exit 1   # [win]
    - test -f $PREFIX/include/cudnn.h                  # [linux]
    - test -f $PREFIX/include/cudnn_adv_train.h        # [linux]
    - test -f $PREFIX/lib/libcudnn.so                  # [linux]
    - test -f $PREFIX/lib/libcudnn_adv_train.so        # [linux]
    - ${GCC} test_load_elf.c -std=c99 -Werror -ldl -o test_load_elf  # [linux]
    - for f in $PREFIX/lib/libcudnn*.so; do ./test_load_elf $f; done  # [linux]

about:
  home: https://developer.nvidia.com/cudnn
  license: LicenseRef-cuDNN-Software-License-Agreement
  license_file: LICENSE
  license_url: https://docs.nvidia.com/deeplearning/cudnn/sla/index.html
  summary: "NVIDIA's cuDNN deep neural network acceleration library"
  description: |
    NVIDIA CUDA Deep Neural Network (cuDNN) is a GPU-accelerated library of
    primitives for deep neural networks. It provides highly tuned
    implementations of routines arising frequently in DNN applications.

    License Agreements:- The packages are governed by the NVIDIA cuDNN
    Software License Agreement (EULA). By downloading and using the packages,
    you accept the terms and conditions of the NVIDIA cuDNN EULA -
    https://docs.nvidia.com/deeplearning/cudnn/sla/index.html
  doc_url: https://docs.nvidia.com/deeplearning/cudnn/
  dev_url: https://developer.nvidia.com/rdp/cudnn-download

extra:
  recipe-maintainers:
    - ivanyashchuk
    - kkraus14
