{% set version = "9.2.1.18" %}
{% set platform = "linux-x86_64" %}  # [linux64]
{% set platform = "linux-sbsa" %}  # [aarch64]
{% set platform = "windows-x86_64" %}  # [win]
{% set extension = "tar.xz" %}  # [not win]
{% set extension = "zip" %}  # [win]

package:
  name: cudnn
  version: {{ version }}

source:
  url: https://developer.download.nvidia.com/compute/cudnn/redist/cudnn/{{ platform }}/cudnn-{{ platform }}-{{ version }}_cuda11-archive.{{ extension }}  # [(cuda_compiler_version or "").startswith("11")]
  url: https://developer.download.nvidia.com/compute/cudnn/redist/cudnn/{{ platform }}/cudnn-{{ platform }}-{{ version }}_cuda12-archive.{{ extension }}  # [(cuda_compiler_version or "").startswith("12")]
  sha256: 39bfc8970b87f905684ce426756d4b34a4f758b9f11afb01edfcc7553af7982a  # [linux64 and (cuda_compiler_version or "").startswith("11")]
  sha256: d6e2dca7dd3a22668738b66056227b2cb6801c5fa3cc7b0c1a10f6ea81228399  # [linux64 and (cuda_compiler_version or "").startswith("12")]
  sha256: 926b6bda35163aa96f8dc92a8206edc400bd3d677162e6b43f13e9870782e159  # [aarch64 and (cuda_compiler_version or "").startswith("11")]
  sha256: fc6f8dfd7b39e8683b1b0a1bd7b3d60ab688f4f62f279a16b6d0ef1d4734efd7  # [aarch64 and (cuda_compiler_version or "").startswith("12")]
  sha256: 6b0600ed2e06373d0fdb152c6b38b5c0c31e9d6ed4a2100abc9f71f8f5b1a4ee  # [win and (cuda_compiler_version or "").startswith("11")]
  sha256: 4ca698c6cf54456143730a483252a6bca2951c9babe8d3aaee5fc6616e53ce0d  # [win and (cuda_compiler_version or "").startswith("12")]

build:
  number: 0
  skip: True  # [osx]
  skip: True  # [cuda_compiler_version == "11.2"]
  # Disable binary relocation to workaround patchelf issue
  # xref: https://github.com/NixOS/patchelf/issues/492
  binary_relocation: false
  script:
    - mkdir -p $PREFIX/include               # [linux]
    - cp include/cudnn*.h $PREFIX/include/   # [linux]
    - mkdir -p $PREFIX/lib                   # [linux]
    - mv lib/libcudnn*.so* $PREFIX/lib/      # [linux]

    - mkdir %LIBRARY_INC%                                   # [win]
    - copy %SRC_DIR%\\include\\cudnn*.h %LIBRARY_INC%\\     # [win]
    - mkdir %LIBRARY_LIB%                                   # [win]
    - copy %SRC_DIR%\\lib\\x64\\cudnn*.lib %LIBRARY_LIB%\\  # [win]
    - mkdir %LIBRARY_BIN%                                   # [win]
    - copy %SRC_DIR%\\bin\\cudnn*.dll %LIBRARY_BIN%\\       # [win]
  ignore_run_exports:
    - cudatoolkit
  run_exports:
    - {{ pin_subpackage('cudnn') }}

requirements:
  build:
    - {{ stdlib('c') }} # https://github.com/conda-forge/conda-forge.github.io/issues/2102
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}
    - arm-variant * {{ arm_variant_type }}  # [aarch64]
  host:
    - cuda-version 11.0  # [(cuda_compiler_version or "").startswith("11")]
    - cuda-version 12.0  # [(cuda_compiler_version or "").startswith("12")]
    - patchelf >=0.12  # [linux]
    # to suppress ".so not found" errors
    - libzlib 1.2       # [linux]
    - libzlib-wapi 1.2  # [win64]
  run:
    - {{ pin_compatible("cuda-version", max_pin="x") }}
    - cudatoolkit 11.*  # [(cuda_compiler_version or "").startswith("11")]
    - cuda-nvrtc        # [(cuda_compiler_version or "").startswith("12")]
    - libcublas         # [(cuda_compiler_version or "").startswith("12")]
  run_constrained:
    - arm-variant * {{ arm_variant_type }}  # [aarch64]

test:
  requires:
    - {{ compiler('c') }}  # [linux]
  files:
    - test_load_elf.c      # [linux]
  commands:
    - if not exist %LIBRARY_INC%/cudnn.h exit 1                       # [win]
    - if not exist %LIBRARY_INC%/cudnn_adv.h exit 1                   # [win]
    - if not exist %LIBRARY_LIB%/cudnn.lib exit 1                     # [win]
    - if not exist %LIBRARY_LIB%/cudnn_adv.lib exit 1                 # [win]
    - if not exist %LIBRARY_BIN%/cudnn64_9.dll exit 1                 # [win]
    - if not exist %LIBRARY_BIN%/cudnn_adv64_9.dll exit 1             # [win]
    - test -f $PREFIX/include/cudnn.h                                 # [linux]
    - test -f $PREFIX/include/cudnn_adv.h                             # [linux]
    - test -f $PREFIX/lib/libcudnn.so                                 # [linux]
    - test -f $PREFIX/lib/libcudnn_adv.so                             # [linux]
    - ${GCC} test_load_elf.c -std=c99 -Werror -ldl -o test_load_elf   # [linux]
    - for f in $PREFIX/lib/libcudnn*.so; do ./test_load_elf $f; done  # [linux]

about:
  home: https://developer.nvidia.com/cudnn
  license: LicenseRef-cuDNN-Software-License-Agreement
  license_file: LICENSE
  license_url: https://docs.nvidia.com/deeplearning/cudnn/sla/index.html
  summary: "NVIDIA's cuDNN deep neural network acceleration library"
  description: |
    NVIDIA CUDA Deep Neural Network (cuDNN) is a GPU-accelerated library of
    primitives for deep neural networks. It provides highly tuned
    implementations of routines arising frequently in DNN applications.

    License Agreements:- The packages are governed by the NVIDIA cuDNN
    Software License Agreement (EULA). By downloading and using the packages,
    you accept the terms and conditions of the NVIDIA cuDNN EULA -
    https://docs.nvidia.com/deeplearning/cudnn/sla/index.html
  doc_url: https://docs.nvidia.com/deeplearning/cudnn/
  dev_url: https://developer.nvidia.com/rdp/cudnn-download

extra:
  recipe-maintainers:
    - billysuh7
#    - adibbley
#    - bdice
#    - jakirkham
#    - vyasr
